generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                  Int                  @id @default(autoincrement())
  nickname            String               @unique
  email               String?              @unique
  password            String
  avatar              String?
  role                Role                 @default(USER)
  isActive            Boolean              @default(true)
  isBanned            Boolean              @default(false)
  emailVerified       Boolean              @default(false)
  lastLoginAt         DateTime?
  failedLoginCount    Int                  @default(0)
  lastFailedLoginAt   DateTime?
  lockedUntil         DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  bio                 String?
  announcements       Announcement[]       @relation("AnnouncementAuthor")
  blockedByUsers      BlockedUser[]        @relation("UserBlocked")
  blockedUsers        BlockedUser[]        @relation("UserBlocker")
  commentReactions    CommentReaction[]
  comments            Comment[]
  featureFlagsChanged FeatureFlag[]        @relation("FeatureFlagLastChangedBy")
  receivedMessages    Message[]            @relation("MessageReceiver")
  sentMessages        Message[]            @relation("MessageSender")
  notifications       Notification[]
  organizations       OrganizationMember[]
  passwordTokens      PasswordResetToken[]
  stories             Story[]
  storyReports        StoryReport[]        @relation("StoryReporter")
  following           UserFollow[]         @relation("UserFollower")
  followers           UserFollow[]         @relation("UserFollowing")
  reportedBy          UserReport[]         @relation("ReportedUser")
  userReports         UserReport[]         @relation("UserReporter")
  sessions            UserSession[]
  settings            UserSettings?

  @@map("users")
}

model UserSettings {
  id                Int                @id @default(autoincrement())
  userId            Int                @unique
  profileVisibility ProfileVisibility  @default(PUBLIC)
  commentPermission CommentPermission  @default(EVERYONE)
  searchVisibility  Boolean            @default(true)
  theme             ThemePreference    @default(SYSTEM)
  fontSize          FontSizePreference @default(MEDIUM)
  reducedMotion     Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Story {
  id        Int           @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  viewCount Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reports   StoryReport[]
  comments  Comment[]

  @@index([authorId])
  @@map("stories")
}

model Comment {
  id        Int             @id @default(autoincrement())
  content   String
  authorId  Int
  storyId   Int
  parentId  Int?
  reportedAt DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  story     Story           @relation(fields: [storyId], references: [id], onDelete: Cascade)
  parent    Comment?        @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]       @relation("CommentReplies")
  reactions CommentReaction[]

  @@index([authorId])
  @@index([storyId])
  @@index([parentId])
  @@index([createdAt])
  @@map("comments")
}

model UserSession {
  id                  Int           @id @default(autoincrement())
  userId              Int
  refreshTokenHash    String
  userAgent           String?
  ipAddress           String?
  geolocation         Json?
  createdAt           DateTime      @default(now())
  lastSeenAt          DateTime      @default(now())
  expiresAt           DateTime
  revokedAt           DateTime?
  revocationReason    String?
  replacedBySessionId Int?
  replacement         UserSession?  @relation("SessionReplacement", fields: [replacedBySessionId], references: [id])
  replacedSessions    UserSession[] @relation("SessionReplacement")
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])
  @@index([refreshTokenHash])
  @@map("user_sessions")
}

model PasswordResetToken {
  id           Int       @id @default(autoincrement())
  userId       Int
  tokenHash    String
  otpHash      String
  expiresAt    DateTime
  consumedAt   DateTime?
  attemptCount Int       @default(0)
  metadata     Json?
  createdAt    DateTime  @default(now())
  verifiedAt   DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([tokenHash])
  @@map("password_reset_tokens")
}

model Organization {
  id           Int                  @id @default(autoincrement())
  name         String
  slug         String               @unique
  description  String?
  website      String?
  contactEmail String?
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  members      OrganizationMember[]

  @@map("organizations")
}

model OrganizationMember {
  id             Int          @id @default(autoincrement())
  organizationId Int
  userId         Int
  role           String       @default("member")
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([userId])
  @@map("organization_members")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  type      NotificationType @default(SYSTEM)
  title     String
  body      String
  data      Json?
  readAt    DateTime?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, readAt])
  @@map("notifications")
}

model Announcement {
  id          Int                    @id @default(autoincrement())
  title       String
  body        String
  visibility  AnnouncementVisibility @default(PUBLIC)
  startsAt    DateTime?
  endsAt      DateTime?
  isActive    Boolean                @default(true)
  createdById Int?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  createdBy   User?                  @relation("AnnouncementAuthor", fields: [createdById], references: [id])

  @@index([visibility])
  @@index([startsAt])
  @@index([endsAt])
  @@map("announcements")
}

model FeatureFlag {
  id              Int       @id @default(autoincrement())
  key             String    @unique
  name            String?
  description     String?
  enabled         Boolean   @default(false)
  rolloutStatus   String?
  metadata        Json?
  lastChangedById Int?
  lastChangedAt   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastChangedBy   User?     @relation("FeatureFlagLastChangedBy", fields: [lastChangedById], references: [id])

  @@map("feature_flags")
}

model Message {
  id         Int       @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  readAt     DateTime?
  reportedAt DateTime?
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  receiver   User      @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@map("messages")
}

model BlockedUser {
  id        Int      @id @default(autoincrement())
  blockerId Int
  blockedId Int
  createdAt DateTime @default(now())
  blocked   User     @relation("UserBlocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User     @relation("UserBlocker", fields: [blockerId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
  @@map("blocked_users")
}

model CommentReaction {
  id           Int      @id @default(autoincrement())
  userId       Int
  commentId    Int
  reactionType String   @default("heart")
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment      Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([commentId])
  @@map("comment_reactions")
}

model UserFollow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("user_follows")
}

model StoryReport {
  id          Int      @id @default(autoincrement())
  reporterId  Int
  storyId     Int
  reason      String
  description String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  reporter    User     @relation("StoryReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@index([storyId])
  @@index([reporterId])
  @@map("story_reports")
}

model UserReport {
  id             Int      @id @default(autoincrement())
  reporterId     Int
  reportedUserId Int
  reason         String
  description    String?
  status         String   @default("pending")
  createdAt      DateTime @default(now())
  reportedUser   User     @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
  reporter       User     @relation("UserReporter", fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([reportedUserId])
  @@index([reporterId])
  @@map("user_reports")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum NotificationType {
  SYSTEM
  SECURITY
  ANNOUNCEMENT
}

enum AnnouncementVisibility {
  PUBLIC
  AUTHENTICATED
  ADMIN
}

enum ProfileVisibility {
  PUBLIC
  COMMUNITY
  PRIVATE
}

enum CommentPermission {
  EVERYONE
  FOLLOWERS
  NONE
}

enum ThemePreference {
  SYSTEM
  LIGHT
  DARK
}

enum FontSizePreference {
  SMALL
  MEDIUM
  LARGE
}
